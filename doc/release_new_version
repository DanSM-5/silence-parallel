= Notes on how to release new version =

== alpha/beta/production ==

Check that documentation is updated (compare to web):

git grep -E '(alpha|beta) testing' | cat
git diff $(date --date="last month" +%Y%m22)
Unmodified beta since last version => production
Unmodified alpha since last version => beta
Modified => alpha

== Update version ==

configure.ac: AC_INIT([parallel], [20100422], [bug-parallel@gnu.org])
src/parallel: $Global::version = 20100422;
README: parallel-20130222

YYYYMMDD=$(echo `yyyymmdd`-1 | bc)
YYYYMMDD=$(echo `yyyymmdd`+1 | bc)
YYYYMMDD=`yyyymmdd`
echo $YYYYMMDD
perl -i -pe "s/20\d\d\d\d\d\d/$YYYYMMDD/" configure.ac
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/parallel
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/sql
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/niceload
perl -i -pe "s/parallel-20\d\d\d\d\d\d/parallel-$YYYYMMDD/" README

=== Autoconf/automake ===

rm -fr autom4te.cache aclocal.m4 config.h config.h.in config.log Makefile.in missing install-sh
rm -rf src/Makefile.in
autoreconf --install -W gnu
./configure
make -j && sudo make install

== Testsuite ==

cd testsuite; make mem; make

== Update NEWS ==

With the same things that goes in the announce mail

== Package ==

./configure
make dist
make dist-bzip2

== Test the package ==

YYYYMMDD=`yyyymmdd`
cp parallel-$YYYYMMDD.tar.bz2 /tmp
pushd /tmp
tar xjvf parallel-$YYYYMMDD.tar.bz2
cd parallel-$YYYYMMDD
./configure && make -j && sudo make -j install
pushd

== Upload ==

YYYYMMDD=`yyyymmdd`
export YYYYMMDD
eval `gpg-agent --daemon`
# Takes up to 8 minutes
make upload

# Only needed for alpha:
YYYYMMDD=`yyyymmdd`
export YYYYMMDD
eval `gpg-agent --daemon`
# Takes up to 8 minutes
make alphaupload

== Update OpenSUSE build system ==


YYYYMMDD=`yyyymmdd`
export YYYYMMDD
cd ~/privat/parallel/packager/obs

find home:tange/parallel/* -type f | grep -v parallel.spec | parallel -Xj1 osc rm {}
# This should not create new files
osc up home:tange/parallel/
make
# Reload build-status:
https://build.opensuse.org/package/show/home:tange/parallel
# Check that one .deb (Debian 5.0) and one .rpm (CentOS) end with 'succeeded'

== Download and test ==

# Only needed for alpha (part of 'make upload')

YYYYMMDD=`yyyymmdd`
pushd /tmp
rm -rf parallel-${YYYYMMDD}*
# This can take 7 minutes
#while ! wget http://ftp.gnu.org/gnu/parallel/parallel-$YYYYMMDD.tar.bz2 ; do sleep 2; done
while ! wget http://alpha.gnu.org/gnu/parallel/parallel-$YYYYMMDD.tar.bz2 ; do sleep 2; done
tar xjvf parallel-$YYYYMMDD.tar.bz2
cd parallel-$YYYYMMDD
./configure
make -j && sudo make -j install
pushd
sudo cp /usr/local/bin/parallel /usr/local/bin/parallel-$YYYYMMDD

== Update website ==

http://www.gnu.org/software/parallel/
http://www.gnu.org/software/parallel/man.html
http://www.gnu.org/software/parallel/sql.html
http://www.gnu.org/software/parallel/sem.html
http://www.gnu.org/software/parallel/env_parallel.html
http://www.gnu.org/software/parallel/parset.html
http://www.gnu.org/software/parallel/parcat.html
http://www.gnu.org/software/parallel/niceload.html

cp src/*.pdf src/*.html  ../parallel-web/parallel
cp src/parallel.html  ../parallel-web/parallel/man.html

pushd ../parallel-web/parallel
# Bug at Savannah makes this take 30 seconds
torsocks cvs up
torsocks cvs ci -m "New release"
pushd

== Commit released version ==

git diff

# Recheck OBS https://build.opensuse.org/package/show?package=parallel&project=home%3Atange

YYYYMMDD=`yyyymmdd`
TAG=MyTag
echo "Released as $YYYYMMDD ('$TAG')." | grep MyTag && (STOP;STOP;STOP)
echo "$TAG" | grep ' ' && (STOP;STOP;STOP)
echo "Released as $YYYYMMDD ('$TAG')."

git commit -a -m "Released as $YYYYMMDD ('$TAG')"
git tag -s -u 88888888 -m "Released as $YYYYMMDD ('$TAG')" $TAG
git tag -s -u 88888888 -m "Released as $YYYYMMDD ('$TAG')" $YYYYMMDD

torsocks git push
torsocks git push origin $TAG
torsocks git push origin $YYYYMMDD


== Update documentation ==

Update version number + 1

YYYYMMDD=$(echo `yyyymmdd`+1 | bc)
echo $YYYYMMDD
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/parallel
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/sql
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/niceload

Unmodified beta since last version => production
Unmodified alpha since last version => beta
Modified => alpha


== Check URLs ==

make testurls


== Update Savannah ==

file:///home/tange/privat/parallel/doc/release_new_version

Content from release mail:

https://savannah.gnu.org/news/submit.php?group=parallel

Test URLs.

https://savannah.gnu.org/news/approve.php?group=parallel

== Update Freshmeat ==

// FreeCode is dying
http://freshmeat.net/projects/parallel/releases/new

== Update Diaspora Twitter ==

https://joindiaspora.com/stream

New release of #GNU Parallel pi.dk/0 New in this release pi.dk/2 See the intro videos pi.dk/1
10 secs installation: wget -O - pi.dk/3|bash

[x] Twitter
Aspect: Public

GNU Parallel - for people who live life in the parallel lane.

== Send announce ==

http://groups.google.com/group/comp.unix.shell/post
http://groups.google.com/group/comp.unix.admin/post

https://lists.gnu.org/mailman/admindb/bug-parallel
https://lists.gnu.org/mailman/admindb/parallel

file:///home/tange/privat/parallel/doc/release_new_version

from:tange@gnu.org
to:parallel@gnu.org, bug-parallel@gnu.org
stable-bcc: Jesse Alama <jessealama@fastmail.fm>

Subject: GNU Parallel 20191222 ('Impeachment') released <<[stable]>>

GNU Parallel 20191222 ('') <<[stable]>> has been released. It is available for download at: http://ftpmirror.gnu.org/parallel/

<<No new functionality was introduced so this is a good candidate for a stable release.>>

GNU Parallel is 10 years old next year on 2020-04-22. You are here by invited to a reception on Friday 2020-04-17.

See https://www.gnu.org/software/parallel/10-years-anniversary.html

Quote of the month:


New in this release:

* GNU Parallel course in Copenhagen https://www.prosa.dk/nc/arrangementer/arrangement/gnu-parallel-med-ole-tange/

* GNU Parallel course in Ã…rhus https://www.prosa.dk/nc/arrangementer/arrangement/gnu-parallel-og-parallelisering-i-unix-shellen/

* GNU Parallel is used in https://github.com/JeffersonLab/rfw_tsf_extractor

* Bug fixes and man page updates.


Get the book: GNU Parallel 2018 http://www.lulu.com/shop/ole-tange/gnu-parallel-2018/paperback/product-23558902.html

GNU Parallel - For people who live life in the parallel lane.


= About GNU Parallel =

GNU Parallel is a shell tool for executing jobs in parallel using one or more computers. A job can be a single command or a small script that has to be run for each of the lines in the input. The typical input is a list of files, a list of hosts, a list of users, a list of URLs, or a list of tables. A job can also be a command that reads from a pipe. GNU Parallel can then split the input and pipe it into commands in parallel.

If you use xargs and tee today you will find GNU Parallel very easy to use as GNU Parallel is written to have the same options as xargs. If you write loops in shell, you will find GNU Parallel may be able to replace most of the loops and make them run faster by running several jobs in parallel. GNU Parallel can even replace nested loops.

GNU Parallel makes sure output from the commands is the same output as you would get had you run the commands sequentially. This makes it possible to use output from GNU Parallel as input for other programs.

For example you can run this to convert all jpeg files into png and gif files and have a progress bar:

  parallel --bar convert {1} {1.}.{2} ::: *.jpg ::: png gif

Or you can generate big, medium, and small thumbnails of all jpeg files in sub dirs:

  find . -name '*.jpg' |
    parallel convert -geometry {2} {1} {1//}/thumb{2}_{1/} :::: - ::: 50 100 200


You can find more about GNU Parallel at: http://www.gnu.org/s/parallel/

You can install GNU Parallel in just 10 seconds with:

    $ (wget -O - pi.dk/3 || lynx -source pi.dk/3 || curl pi.dk/3/ || \
       fetch -o - http://pi.dk/3 ) > install.sh
    $ sha1sum install.sh | grep 3374ec53bacb199b245af2dda86df6c9
    12345678 3374ec53 bacb199b 245af2dd a86df6c9
    $ md5sum install.sh | grep 029a9ac06e8b5bc6052eac57b2c3c9ca
    029a9ac0 6e8b5bc6 052eac57 b2c3c9ca
    $ sha512sum install.sh | grep f517006d9897747bed8a4694b1acba1b
    40f53af6 9e20dae5 713ba06c f517006d 9897747b ed8a4694 b1acba1b 1464beb4
    60055629 3f2356f3 3e9c4e3c 76e3f3af a9db4b32 bd33322b 975696fc e6b23cfb
    $ bash install.sh

Watch the intro video on http://www.youtube.com/playlist?list=PL284C9FF2488BC6D1

Walk through the tutorial (man parallel_tutorial). Your command line will love you for it.

When using programs that use GNU Parallel to process data for publication please cite:

O. Tange (2018): GNU Parallel 2018, March 2018, https://doi.org/10.5281/zenodo.1146014.

If you like GNU Parallel:

* Give a demo at your local user group/team/colleagues
* Post the intro videos on Reddit/Diaspora*/forums/blogs/ Identi.ca/Google+/Twitter/Facebook/Linkedin/mailing lists
* Get the merchandise https://gnuparallel.threadless.com/designs/gnu-parallel
* Request or write a review for your favourite blog or magazine
* Request or build a package for your favourite distribution (if it is not already there)
* Invite me for your next conference

If you use programs that use GNU Parallel for research:

* Please cite GNU Parallel in you publications (use --citation)

If GNU Parallel saves you money:

* (Have your company) donate to FSF https://my.fsf.org/donate/


= About GNU SQL =

GNU sql aims to give a simple, unified interface for accessing databases through all the different databases' command line clients. So far the focus has been on giving a common way to specify login information (protocol, username, password, hostname, and port number), size (database and table size), and running queries.

The database is addressed using a DBURL. If commands are left out you will get that database's interactive shell.

When using GNU SQL for a publication please cite:

O. Tange (2011): GNU SQL - A Command Line Tool for Accessing Different Databases Using DBURLs, ;login: The USENIX Magazine, April 2011:29-32.


= About GNU Niceload =

GNU niceload slows down a program when the computer load average (or other system activity) is above a certain limit. When the limit is reached the program will be suspended for some time. If the limit is a soft limit the program will be allowed to run for short amounts of time before being suspended again. If the limit is a hard limit the program will only be allowed to run when the system is below the limit.
