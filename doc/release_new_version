# SPDX-FileCopyrightText: 2021-2022 Ole Tange, http://ole.tange.dk and Free Software and Foundation, Inc.
# SPDX-License-Identifier: GFDL-1.3-or-later
# SPDX-License-Identifier: CC-BY-SA-4.0

= Notes on how to release new version =

== alpha/beta/production ==

Check that documentation is updated (compare to web):

git checkout master
git grep -E '(alpha|beta) testing' | cat
git diff $(date --date="last month" +%Y%m22)
Unmodified beta since last version => production
Unmodified alpha since last version => beta
Modified => alpha

== Update NEWS ==

With the same things that goes in the announce mail

== Testsuite ==

Start termux on Android
Start: wssh mac ping fi.dk
niceload --prg firefox &
cd testsuite;
# With 23 GB RAM free this takes 3m43s
make mem;
# Estimated time: 13m
make long
# Estimated time: 42m
make short

== Update version ==

https://savannah.gnu.org/news/submit.php?group=parallel

Draft:
perl -ne '/^Subject:/..0 and print' doc/release_new_version | clipboard


https://zenodo.org/deposit/new

Do you already have a DOI for this upload? No
(Get a DOI now!)
Resource type: Software
GNU Parallel 20xxxx22 ('Xxxx')
Add creator: Person
Tange, Ole
https://orcid.org/0000-0002-6345-1437
Role: Contact person
Description
GNU Parallel is a general parallelizer to run multiple serial command line programs in parallel without changing them.

License:
gpl

[Save]


DOI=10.5281/zenodo.4381888
SPCTAG='Privacy Shield'

# Update version
. packager/releasescripts/updateversion

# Load doi+tag in other window
. .last-doitag.txt

=== Reconfig autoconf/automake, build tar.bz2 and test it ===

. .last-doitag.txt
make reconf &&
make pack_unpack_and_test_build

== Upload ==

. .last-doitag.txt
eval `gpg-agent --daemon`
# Takes up to 8 minutes
make upload

# Only needed for alpha:
. .last-doitag.txt
eval `gpg-agent --daemon`
# Takes up to 8 minutes
make alphaupload

== Update OpenSUSE build system ==

. .last-doitag.txt
cd ~/privat/parallel/packager/obs

find home-tange/parallel/* -type f |
  grep -Ev '(PKGBUILD|parallel.spec|Makefile)' |
  parallel -j1 'osc rm {} || rm {}'
# This should not create new files
osc up home-tange/parallel/
make
# Reload build-status:
https://build.opensuse.org/package/show/home:tange/parallel
# Check that one .deb (Debian 5.0) and one .rpm (CentOS) end with 'succeeded'

== Upload LBRY ==

lbry://@GnuParallel#4/parallel-20210322.tar.bz2

# An easy way to support GNU Parallel is to tip on LBRY.
# 
# :
# 
# If you like GNU Parallel record a video testimonial: Say who you are, what you use GNU Parallel for, how it helps you, and what you like most about it. Include a command that uses GNU Parallel if you feel like it.
# 
# Thumbnail: https://www.gnu.org/software/parallel/logo-gray+black10000.png
# 
# Tags: gnu parallel software

. .last-doitag.txt
file_path="`pwd`/parallel-$YYYYMMDD.tar.bz2"
#title="GNU Parallel $YYYYMMDD ('$SPCTAG') [stable]"
title="GNU Parallel $YYYYMMDD ('$SPCTAG')"
name="GNU-Parallel-$YYYYMMDD-$TAG"
author="Ole Tange"
license="GNU GPLv3 or later"
thumbnail_url=https://www.gnu.org/software/parallel/logo-gray+black10000.png
channel_name="@GnuParallel"
tags_opt='--tag gnu --tag parallel --tag free --tag software'
release_time=$(date -d "$YYYYMMDD" +%s)

description="An easy way to support GNU Parallel is to tip on LBRY.

$(perl -ne '/About\sGNU\sParallel/ and exit;/It\sis\savailable/..0 and print' doc/release_new_version)
"
echo
echo "Title: $title"
echo
echo "$description" | grep '<<.*>>' && echo STOP STOP STOP ||
echo "$description"

lbrynet publish \
  --bid=0.01 \
  --file_path="$file_path" \
  --name="$name" \
  --title="$title" \
  --description="$description" \
  --author="$author" \
  $languages_opt \
  $tags_opt \
  --license="$license" \
  --thumbnail_url="$thumbnail_url" \
  --channel_name="$channel_name" \
  --release_time="$release_time" \

== Update website ==

http://www.gnu.org/software/parallel/
http://www.gnu.org/software/parallel/man.html
http://www.gnu.org/software/parallel/sql.html
http://www.gnu.org/software/parallel/sem.html
http://www.gnu.org/software/parallel/env_parallel.html
http://www.gnu.org/software/parallel/parcat.html
http://www.gnu.org/software/parallel/parset.html
http://www.gnu.org/software/parallel/parsort.html
http://www.gnu.org/software/parallel/niceload.html

make web
cp -r src/*.pdf src/sphinx/build/html/* ../parallel-web/parallel
cp ../parallel-web/parallel/parallel.html  ../parallel-web/parallel/man.html

pushd ../parallel-web/parallel
# Bug at Savannah makes this take 30 seconds
(cd ..;
 cvs -z3 -d:ext:tange@cvs.savannah.gnu.org:/web/parallel co parallel)
cvs up
cvs ci -m "New release"
pushd

== Commit released version ==

git diff

# Recheck OBS https://build.opensuse.org/package/show/home:tange/parallel

. .last-doitag.txt
echo "Released as $YYYYMMDD ('$TAG')." | grep MyTag && (STOP;STOP;STOP)
echo "$TAG" | grep ' ' && (STOP;STOP;STOP)
echo "Released as $YYYYMMDD ('$SPCTAG')."

git commit -a -m "Released as $YYYYMMDD ('$SPCTAG')"
git tag -s -u 88888888 -m "Released as $YYYYMMDD ('$SPCTAG')" $TAG
git tag -s -u 88888888 -m "Released as $YYYYMMDD ('$SPCTAG')" $YYYYMMDD

torsocks git push
torsocks git push origin $TAG
torsocks git push origin $YYYYMMDD

git branch -d premaster
git branch premaster


== Zenodo ==

Add tar.bz2 [Start upload] and [Publish].


== Update documentation ==

Update version number + 1

export YYYYMMDD=`yyyymmdd`
export YYYYMMDD=${YYYYMMDD:0:6}23
echo $YYYYMMDD
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/parallel
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/sql
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/env_parallel*
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/parsort
perl -i -pe "/version/ and s/20\d\d\d\d\d\d/$YYYYMMDD/" src/niceload

Unmodified beta since last version => production
Unmodified alpha since last version => beta
Modified => alpha


== Check URLs ==

make testurls


== Check REUSE ==

make reuse

https://api.reuse.software/info/git.savannah.gnu.org/git/parallel
https://api.reuse.software/status/git.savannah.gnu.org/git/parallel

== Update Savannah ==

perl -ne '/^Subject:/..0 and print' < doc/release_new_version | clipboard

Content from release mail:

https://savannah.gnu.org/news/submit.php?group=parallel

Test URLs.

https://savannah.gnu.org/news/approve.php?group=parallel


== Update Mastodon Twitter ==

https://hostux.social/@GNU_Parallel

New release of #GNU Parallel pi.dk/0
New in this release pi.dk/2
See the intro videos pi.dk/1
10 secs installation: pi.dk/3

GNU Parallel - for people who live life in the parallel lane.


== Send announce ==

http://groups.google.com/group/comp.unix.shell/post
http://groups.google.com/group/comp.unix.admin/post

https://lists.gnu.org/mailman/admindb/bug-parallel
https://lists.gnu.org/mailman/admindb/parallel

file:///home/tange/privat/parallel/doc/release_new_version

For codename look at https://www.onthisday.com/

from:tange@gnu.org
to:parallel@gnu.org, bug-parallel@gnu.org
stable-bcc: Jesse Alama <jessealama@fastmail.fm>

Subject: GNU Parallel 20250222 ('Grete Tange') released [stable]

GNU Parallel 20250222 ('Grete Tange') has been released. It is available for download at: lbry://@GnuParallel:4

Quote of the month:

  Use GNU Parallel and thank me later ￼
    -- pratikbin | NodeOps @pratikbin
  
New in this release:

* No new features. This is a candidate for a stable release.

* Bug fixes and man page updates.

News about GNU Parallel:

* Execute programs in parallel https://fekir.info/post/execute-programs-in-parallel/

* GNU Parallel を触れてみる https://blog.yamano.dev/posts/3fa121b4c7a971aacf564509a1077fb7/

* GNU Parallel is a Time Saver https://ramanenka.dev/gnu-parallel/


GNU Parallel - For people who live life in the parallel lane.

If you like GNU Parallel record a video testimonial: Say who you are, what you use GNU Parallel for, how it helps you, and what you like most about it. Include a command that uses GNU Parallel if you feel like it.


= About GNU Parallel =

GNU Parallel is a shell tool for executing jobs in parallel using one or more computers. A job can be a single command or a small script that has to be run for each of the lines in the input. The typical input is a list of files, a list of hosts, a list of users, a list of URLs, or a list of tables. A job can also be a command that reads from a pipe. GNU Parallel can then split the input and pipe it into commands in parallel.

If you use xargs and tee today you will find GNU Parallel very easy to use as GNU Parallel is written to have the same options as xargs. If you write loops in shell, you will find GNU Parallel may be able to replace most of the loops and make them run faster by running several jobs in parallel. GNU Parallel can even replace nested loops.

GNU Parallel makes sure output from the commands is the same output as you would get had you run the commands sequentially. This makes it possible to use output from GNU Parallel as input for other programs.

For example you can run this to convert all jpeg files into png and gif files and have a progress bar:

  parallel --bar convert {1} {1.}.{2} ::: *.jpg ::: png gif

Or you can generate big, medium, and small thumbnails of all jpeg files in sub dirs:

  find . -name '*.jpg' |
    parallel convert -geometry {2} {1} {1//}/thumb{2}_{1/} :::: - ::: 50 100 200

You can find more about GNU Parallel at: http://www.gnu.org/s/parallel/

You can install GNU Parallel in just 10 seconds with:

    $ (wget -O - pi.dk/3 || lynx -source pi.dk/3 || curl pi.dk/3/ || \
       fetch -o - http://pi.dk/3 ) > install.sh
    $ sha1sum install.sh | grep c555f616391c6f7c28bf938044f4ec50
    12345678 c555f616 391c6f7c 28bf9380 44f4ec50
    $ md5sum install.sh | grep 707275363428aa9e9a136b9a7296dfe4
    70727536 3428aa9e 9a136b9a 7296dfe4
    $ sha512sum install.sh | grep b24bfe249695e0236f6bc7de85828fe1f08f4259
    83320d89 f56698ec 77454856 895edc3e aa16feab 2757966e 5092ef2d 661b8b45
    b24bfe24 9695e023 6f6bc7de 85828fe1 f08f4259 6ce5480a 5e1571b2 8b722f21
    $ bash install.sh

Watch the intro video on http://www.youtube.com/playlist?list=PL284C9FF2488BC6D1

Walk through the tutorial (man parallel_tutorial). Your command line will love you for it.

When using programs that use GNU Parallel to process data for publication please cite:

O. Tange (2018): GNU Parallel 2018, March 2018, https://doi.org/10.5281/zenodo.1146014.

If you like GNU Parallel:

* Give a demo at your local user group/team/colleagues
* Post the intro videos on Reddit/Diaspora*/forums/blogs/ Identi.ca/Google+/Twitter/Facebook/Linkedin/mailing lists
* Get the merchandise https://gnuparallel.threadless.com/designs/gnu-parallel
* Request or write a review for your favourite blog or magazine
* Request or build a package for your favourite distribution (if it is not already there)
* Invite me for your next conference

If you use programs that use GNU Parallel for research:

* Please cite GNU Parallel in you publications (use --citation)

If GNU Parallel saves you money:

* (Have your company) donate to FSF https://my.fsf.org/donate/


= About GNU SQL =

GNU sql aims to give a simple, unified interface for accessing databases through all the different databases' command line clients. So far the focus has been on giving a common way to specify login information (protocol, username, password, hostname, and port number), size (database and table size), and running queries.

The database is addressed using a DBURL. If commands are left out you will get that database's interactive shell.

When using GNU SQL for a publication please cite:

O. Tange (2011): GNU SQL - A Command Line Tool for Accessing Different Databases Using DBURLs, ;login: The USENIX Magazine, April 2011:29-32.


= About GNU Niceload =

GNU niceload slows down a program when the computer load average (or other system activity) is above a certain limit. When the limit is reached the program will be suspended for some time. If the limit is a soft limit the program will be allowed to run for short amounts of time before being suspended again. If the limit is a hard limit the program will only be allowed to run when the system is below the limit.
