echo '### bug #36595: silent loss of input with --pipe and --sshlogin'
### bug #36595: silent loss of input with --pipe and --sshlogin
  seq 10000 | xargs | parallel --pipe -S 10/localhost cat 2>/dev/null | wc
      1   10000   48894
echo 'bug #36707: --controlmaster eats jobs'
bug #36707: --controlmaster eats jobs
  seq 2 | parallel -k --controlmaster --sshlogin localhost echo OK{}
OK1
OK2
echo '### -L -n with pipe'
### -L -n with pipe
  seq 14 | parallel --pipe -k -L 3 -n 2 'cat;echo 6 Ln line record'
1
2
3
4
5
6
6 Ln line record
7
8
9
10
11
12
6 Ln line record
13
14
6 Ln line record
echo '### -L -N with pipe'
### -L -N with pipe
  seq 14 | parallel --pipe -k -L 3 -N 2 'cat;echo 6 LN line record'
1
2
3
4
5
6
6 LN line record
7
8
9
10
11
12
6 LN line record
13
14
6 LN line record
echo '### -l -N with pipe'
### -l -N with pipe
  seq 14 | parallel --pipe -k -l 3 -N 2 'cat;echo 6 lN line record'
1
2
3
4
5
6
6 lN line record
7
8
9
10
11
12
6 lN line record
13
14
6 lN line record
echo '### -l -n with pipe'
### -l -n with pipe
  seq 14 | parallel --pipe -k -l 3 -n 2 'cat;echo 6 ln line record'
1
2
3
4
5
6
6 ln line record
7
8
9
10
11
12
6 ln line record
13
14
6 ln line record
echo '### bug #39360: --joblog does not work with --pipe'
### bug #39360: --joblog does not work with --pipe
  seq 100 | parallel --joblog - --pipe wc | tr '0-9' 'X'
Seq	Host	Starttime	JobRuntime	Send	Receive	Exitval	Signal	Command
    XXX     XXX     XXX
X	:	XXXXXXXXXX.XXX	     X.XXX	XXX	XX	X	X	wc
echo '### bug #39572: --tty and --joblog do not work'
### bug #39572: --tty and --joblog do not work
  seq 1 | parallel --joblog - -u true | tr '0-9' 'X'
Seq	Host	Starttime	JobRuntime	Send	Receive	Exitval	Signal	Command
X	:	XXXXXXXXXX.XXX	     X.XXX	X	X	X	X	true X
echo '### How do we deal with missing $HOME'
### How do we deal with missing $HOME
   unset HOME; stdout perl -w $(which parallel) -k echo ::: 1 2 3
parallel: Warning: $HOME not set. Using /tmp.
1
2
3
echo '### How do we deal with missing $SHELL'
### How do we deal with missing $SHELL
   unset SHELL; stdout perl -w $(which parallel) -k echo ::: 1 2 3
1
2
3
echo '### Test if length is computed correctly - first should give one line, second 2 lines each'
### Test if length is computed correctly - first should give one line, second 2 lines each
  seq 4 | parallel -s 29 -X -kj1 echo a{}b{}c
a1b1c a2b2c a3b3c a4b4c
  seq 4 | parallel -s 28 -X -kj1 echo a{}b{}c
a1b1c a2b2c a3b3c
a4b4c
  seq 4 | parallel -s 21 -X -kj1 echo {} {}
1 2 3 4 1 2 3 4
  seq 4 | parallel -s 20 -X -kj1 echo {} {}
1 2 3 1 2 3
4 4
  seq 4 | parallel -s 23 -m -kj1 echo a{}b{}c
a1 2 3 4b1 2 3 4c
  seq 4 | parallel -s 22 -m -kj1 echo a{}b{}c
a1 2 3b1 2 3c
a4b4c
  seq 4 | parallel -s 21 -m -kj1 echo {} {}
1 2 3 4 1 2 3 4
  seq 4 | parallel -s 20 -m -kj1 echo {} {}
1 2 3 1 2 3
4 4
echo 'bug #44144: --tagstring {=s/a/b/=} broken'
bug #44144: --tagstring {=s/a/b/=} broken
  # Do not be confused by {} in --rpl
  parallel --rpl '{:} s/A/D/;{}' --tagstring '{1:}{-1:}{= s/A/E/=}' echo {} ::: A/B.C
D/B.CD/B.CE/B.C	A/B.C
  # Non-standard --parens   parallel --parens ,, --rpl '{:} s/A/D/;{}' --tagstring '{1:}{-1:}, 's/A/E/, echo {} ::: A/B.C
  # Non-standard --parens -i
  parallel --rpl '{:} s/A/D/;{}' --tag --parens ,, -iDUMMY echo {} ::: A/B.C
A/B.C	{} A/B.C
echo 'bug #45692: Easy way of cancelling a job in {= =} and'
bug #45692: Easy way of cancelling a job in {= =} and
echo 'bug #45691: Accessing multiple arguments in {= =}'
bug #45691: Accessing multiple arguments in {= =}
  parallel -k echo {= '$arg[1] eq 2 and $job->skip()' =} ::: {1..5}
1
3
4
5
