par_children_receive_sig	### Do children receive --termseq signals
par_children_receive_sig	Got TERM
par_children_receive_sig	Got TERM
par_children_receive_sig	Got TERM
par_children_receive_sig	Got INT
par_children_receive_sig	Got TERM
par_keeporder_roundrobin	bug #50081: --keep-order --round-robin should give predictable results
par_keeporder_roundrobin	OK
par_kill_int_twice	### Are children killed if GNU Parallel receives INT twice? There should be no sleep at the end
par_kill_int_twice	bash-+-perl---bash---sleep
par_kill_int_twice	     `-pstree
par_kill_int_twice	bash---pstree
par_kill_term_twice	### Are children killed if GNU Parallel receives TERM twice? There should be no sleep at the end
par_kill_term_twice	bash-+-perl---bash---sleep
par_kill_term_twice	     `-pstree
par_kill_term_twice	parallel: SIGTERM received. No new jobs will be started.
par_kill_term_twice	parallel: Waiting for these 1 jobs to finish. Send SIGTERM again to stop now.
par_kill_term_twice	parallel: bash -c sleep\ 120\ \&\ pid\=\$\!\;\ wait\ \$pid 1
par_kill_term_twice	bash-+-perl---bash---sleep
par_kill_term_twice	     `-pstree
par_kill_term_twice	bash---pstree
par_multiline_commands	bug #50781: joblog format with multiline commands
par_multiline_commands	1
par_multiline_commands	finish 1
par_multiline_commands	2
par_multiline_commands	finish 2
par_multiline_commands	3
par_multiline_commands	finish 3
par_pipepart_block	### --pipepart --block -# (# < 0)
par_pipepart_block	1
par_pipepart_block	2
par_pipepart_block	3
par_pipepart_block	4
par_pipepart_block	5
par_pipepart_block	6
par_pipepart_block	7
par_pipepart_block	8
par_pipepart_block	9
par_pipepart_block	10
par_pipepart_block	11
par_pipepart_block	12
par_pipepart_block	13
par_pipepart_block	14
par_pipepart_block	15
par_pipepart_block	16
par_pipepart_block	17
par_pipepart_block	18
par_pipepart_block	19
par_pipepart_block	20
par_pipepart_block	1-2
par_pipepart_block	2-2
par_pipepart_block	1-4
par_pipepart_block	2-4
par_pipepart_block	3-4
par_pipepart_block	4-4
par_pipepart_block	1-20
par_pipepart_block	2-20
par_pipepart_block	3-20
par_pipepart_block	4-20
par_pipepart_block	5-20
par_pipepart_block	6-20
par_pipepart_block	7-20
par_pipepart_block	8-20
par_pipepart_block	9-20
par_pipepart_block	10-20
par_pipepart_block	11-20
par_pipepart_block	12-20
par_pipepart_block	13-20
par_pipepart_block	14-20
par_pipepart_block	15-20
par_pipepart_block	16-20
par_pipepart_block	17-20
par_pipepart_block	18-20
par_pipepart_block	19-20
par_pipepart_block	20-20
par_results_arg_256	### bug #42089: --results with arg > 256 chars (should be 1 char shorter)
par_results_arg_256	1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456
par_results_arg_256	123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345
par_slow_args_generation	### Test slow arguments generation - https://savannah.gnu.org/bugs/?32834
par_slow_args_generation	1
par_slow_args_generation	2
par_slow_args_generation	3
par_wrong_slot_rpl_resume	### bug #47644: Wrong slot number replacement when resuming
par_wrong_slot_rpl_resume	1 0
par_wrong_slot_rpl_resume	2 1
par_wrong_slot_rpl_resume	3 2
par_wrong_slot_rpl_resume	4 3
par_wrong_slot_rpl_resume	1 4
par_wrong_slot_rpl_resume	2 5
par_wrong_slot_rpl_resume	3 6
par_wrong_slot_rpl_resume	4 7
par_wrong_slot_rpl_resume	1 8
par_wrong_slot_rpl_resume	2 9
par_wrong_slot_rpl_resume	3 10
par_wrong_slot_rpl_resume	4 11
par_wrong_slot_rpl_resume	1 12
par_wrong_slot_rpl_resume	2 13
par_wrong_slot_rpl_resume	3 14
par_wrong_slot_rpl_resume	4 15
par_wrong_slot_rpl_resume	1 16
par_wrong_slot_rpl_resume	2 17
par_wrong_slot_rpl_resume	3 18
par_wrong_slot_rpl_resume	4 19
par_wrong_slot_rpl_resume	1 20
