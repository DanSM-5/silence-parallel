#!/usr/bin/perl -w

=head1 NAME

parallel - build and execute command lines from standard input in parallel

=head1 SYNOPSIS

B<parallel> [options] [command [arguments]] < list_of_arguments

=head1 DESCRIPTION

For each line of input B<parallel> will execute B<command> with the
line as arguments. If no B<command> is given the line of input is
executed.  B<parallel> can often be used as a substitute for B<xargs>
or B<cat | sh>.

Several lines will be run in parallel.

=over 9

=item I<command>

Command to execute.  If B<command> or the following arguments contain {}
every instance will be substituted with the input line. Setting a
command also invokes B<-f>.

If B<command> is given, B<parallel> will behave similar to B<xargs>. If
B<command> is not given B<parallel> will behave similar to B<cat | sh>.

=item I<-0>

Use NUL as delimiter.  Normally input lines will end in \n
(newline). If they end in \0 (NUL), then use this option. It is useful
for processing filenames that may contain \n (newline).

=item B<-c>

Line is a command.  The input line contains more than one argument or
the input line needs to be evaluated by the shell. This is the default
if B<command> is not set. Can be reversed with B<-f>.

=item B<-f>

Line is a filename.  The input line contains a filename that will be
quoted so it is not evaluated by the shell. This is the default if
B<command> is set. Can be reversed with B<-c>.

=item B<-g>

Group output.  Output from each jobs is grouped together and is only
printed when the command is finished. STDERR first followed by STDOUT.
B<-g> is the default. Can be reversed with B<-u>.

=item B<-j> I<N>

Run N jobs in parallel.  0 means as many as possible. Default is 10.

=item B<-j> +I<N>

Add N to the number of CPUs.  Run this many jobs in parallel. For
compute intensive jobs I<-j +0> is useful as it will run
number-of-cpus jobs in parallel.

=item B<-j> -I<N>

Subtract N from the number of CPUs.  Run this many jobs in parallel.
If the evaluated number is less than 1 then 1 will be used.

=item B<-j> I<N>%

Multiply N% with the number of CPUs.  Run this many jobs in parallel.
If the evaluated number is less than 1 then 1 will be used.

=item B<-q>

Quote B<command>.  This will quote the command line so special
characters are not interpreted by the shell. See the section
QUOTING. Most people will never need this.  Quoting is disabled by
default.

=item B<-s>

Silent.  The job to be run will not be printed. This is the default.
Can be reversed with B<-v>.

=item B<-u>

Ungroup output.  Output is printed as soon as possible. This may cause
output from different commands to be mixed. Can be reversed with B<-g>.

=item B<-v>

Verbose.  Print the job to be run. Can be reversed with B<-s>.

=item B<-x>

xargs.  Insert as many arguments as the command line length permits.

=back

=head1 EXAMPLE 1: Working as cat | sh. Ressource inexpensive jobs and evaluation

B<parallel> can work similar to B<cat | sh>. 

A ressource inexpensive job is a job that takes very little CPU, disk
I/O and network I/O. Ping is an example of a ressource inexpensive
job. wget is too - if the webpages are small.

The content of the file jobs_to_run:

  ping -c 1 10.0.0.1
  wget http://status-server/status.cgi?ip=10.0.0.1
  ping -c 1 10.0.0.2
  wget http://status-server/status.cgi?ip=10.0.0.2
  ...
  ping -c 1 10.0.0.255
  wget http://status-server/status.cgi?ip=10.0.0.255

To run 100 processes simultaneously do:

B<parallel -j 100 < jobs_to_run>

As there is not a B<command> the option B<-c> is default because the
jobs needs to be evaluated by the shell.

=head1 EXAMPLE 2: Working as xargs -n1. Argument appending

B<parallel> can work similar to B<xargs -n1>. 

To output all html files run:

B<find . -name '*.html' | parallel cat>

As there is a B<command> the option B<-f> is default because the
filenames needs to be protected from the shell in case a filename
contains special characters.

=head1 EXAMPLE 3: Compute intensive jobs and substitution

If ImageMagick is installed this will generate a thumbnail of a jpg
file:

B<convert -geometry 120 foo.jpg thumb_foo.jpg>

If the system has more than 1 CPU it can be run with number-of-cpus
jobs in parallel (-j +0). This will do that for all jpg files in a
directory:

B<ls *.jpg | parallel -j +0 convert -geometry 120 {} thumb_{}>

To do it recursively use B<find>:

B<find . -name '*.jpg' | parallel -j +0 convert -geometry 120 {} {}_thumb.jpg>

Notice how the argument has to start with {} as {} will include path
(e.g. running B<convert -geometry 120 ./foo/bar.jpg
thumb_./foo/bar.jpg> would clearly be wrong). It will result in files
like ./foo/bar.jpg_thumb.jpg. If that is not wanted this can fix it:

  find . -name '*.jpg' | \
  perl -pe 'chomp; $a=$_; s:/([^/]+)$:/thumb_$1:; $_="convert -geometry 120 $a $_\n"' | \
  parallel -c -j +0

Unfortunately this will not work if the filenames contain special
characters (such as space or quotes). If you have B<ren> installed this
is a better solution:

  find . -name '*.jpg' | parallel -j +0 convert -geometry 120 {} {}_thumb.jpg
  find . -name '*_thumb.jpg' | ren 's:/([^/]+)_thumb.jpg$:/thumb_$1:'

=head1 EXAMPLE 4: Substitution and redirection

This will compare all files in the dir to the file foo and save the
diffs in corresponding .diff files:

B<ls | parallel diff {} foo ">>B<"{}.diff>

Quoting of > is necessary to postpone the redirection. Another
solution is to quote the whole command:

B<ls | parallel "diff {} foo >>B<{}.diff">


=head1 EXAMPLE 5: Composed commands

A job can consist of several commands. This will print the number of
files in each directory:

B<ls | parallel 'echo -n {}" "; ls {}|wc -l'>

To put the output in a file called <name>.dir:

B<ls | parallel '(echo -n {}" "; ls {}|wc -l) >>B< {}.dir'>

=head1 QUOTING

For more advanced use quoting may be an issue. The following will
print the filename for each line that has exactly 2 columns:

B<perl -ne '/^\S+\s+\S+$/ and print $ARGV,"\n"' file>

This can be done by B<parallel> using:

B<ls | parallel "perl -ne '/^\\S+\\s+\\S+$/ and print \$ARGV,\"\\n\"'">

Notice how \'s, "'s, and $'s needs to be quoted. B<parallel> can do
the quoting by using option B<-q>:

B<ls | parallel -q  perl -ne '/^\S+\s+\S+$/ and print $ARGV,"\n"'>

However, this means you cannot make the shell interpret special
characters. For example this B<will not work>:

B<ls | parallel -q "diff {} foo >>B<{}.diff"> 

because > needs to be interpreted by the shell.

If you get errors like:

B<sh: -c: line 0: syntax error near unexpected token>

then you might try using B<-q>.

B<Conclusion>: To avoid dealing with the quoting problems it may be
easier just to write a small script and have B<parallel> call that
script.


=head1 DIFFERENCES BETWEEN xargs/find -exec AND parallel

B<xargs> and B<find -exec> offer some of the same possibilites as
B<parallel>. 

B<find -exec> only works on files. So processing other input (such as
hosts or URLs) will require creating these inputs as files. B<find
-exec> has no support for running commands in parallel.

B<xargs> deals badly with special characters (such as space, ' and ") unless
B<-0> is specified. Many input generators are not optimized for using
B<NUL> as separator but are optimized for B<newline> as separator. E.g
B<head>, B<tail>, B<awk>, B<ls>, B<echo>, B<sed>, B<tar -v>, B<perl>
(-0 and \0 instead of \n), B<locate> (requires using -0), B<find>
(requires using -print0), B<grep> (requires user to use -z or -Z).

The input I<can> be fixed for B<xargs> with: 

tr '\n' '\0'

So B<parallel>'s newline separation can be emulated with:

cat | tr '\n' '\0' | xargs -0 -n1 I<command>

B<xargs> can run a given number of jobs in parallel, but has no
support for running no_of_cpus jobs in parallel.

B<xargs> has no support for grouping the output, therefore output may
run together, e.g. the first half of a line is from one process and
the last half of the line is from another process.

If no command is given to B<xargs> it defaults to /bin/echo. So the
B<cat | sh> functionality is missing.

Quoting in B<xargs> works like B<-q> in B<parallel>. Doing B<ls |
parallel "wc {} >> B<{}.wc"> using B<xargs> seems to be impossible.

=head1 BUGS

Filenames beginning with '-' can cause some commands to give
unexpected results, as it will often be interpreted as an option.

If you have a lot of filehandles, then computing the max no 
takes a long time.


=head1 REPORTING BUGS

Report bugs to <bug-parallel@tange.dk>.


=head1 AUTHOR

Copyright (C) 2007-10-18 Ole Tange, http://ole.tange.dk
Copyright (C) 2008-2009 Ole Tange, http://ole.tange.dk


=head1 LICENSE

Copyright (C) 2007 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


=head1 DEPENDENCIES

B<parallel> uses Perl, and the Perl modules Getopt::Std, IPC::Open3,
Symbol, IO::File, POSIX, and File::Temp.


=head1 SEE ALSO

B<find>(1), B<xargs>(1)

=cut


use IPC::Open3;
use Symbol qw(gensym);
use IO::File;
use POSIX ":sys_wait_h";
use File::Temp qw/ tempfile tempdir /;
use Getopt::Std;

my ($processes,$command);
getopts("0cdefgj:qsuvx") || die_usage();

# Defaults:
$Global::debug = 0;
$processes = 10;
$command = undef;
$Global::verbose = 0;
$Global::grouped = 1;
$Global::quoting = 0;
$Global::input_is_filename = (@ARGV);
$/="\n";

$Global::debug = (defined $::opt_d);
if(defined $::opt_j) { $processes = compute_number_of_processes($::opt_j); }
if(defined $::opt_x) { 
    $Global::xargs = 1; 
    $Global::command_line_max_len = max_length_of_command_line(); 
}
if(defined $::opt_v) { $Global::verbose = 1; }
if(defined $::opt_s) { $Global::verbose = 0; }
if(defined $::opt_g) { $Global::grouped = 1; }
if(defined $::opt_u) { $Global::grouped = 0; }
if(defined $::opt_c) { $Global::input_is_filename = 0; }
if(defined $::opt_f) { $Global::input_is_filename = 1; }
if(defined $::opt_0) { $/ = "\0"; }
if(defined $::opt_q) { $Global::quoting = 1; }
if(@ARGV) { 
    if($Global::quoting) {
        $Global::command = join(" ", shell_quote(@ARGV)); 
    } else {
        $Global::command = join(" ", @ARGV); 
    }
}

init_run_jobs();
DoNotReap();

while($Global::running_jobs < $processes 
      and 
      start_another_job()) {
    # skip
}

ReapIfNeeded();
drain_job_queue();

#
# Generating the command line
#

sub generate_command_line {
    my $command = shift;
    my ($job_line,$last_good);
    my ($next_arg,@quoted_args,$arg_length);
    while ($next_arg = get_next_arg()) {
	push (@quoted_args, $next_arg);
	if(not $Global::xargs) {
	    last;
	} else {
	    # Emulate xargs if there is a command and -x is set
	    $arg_length += length $next_arg + 1;
	    debug("arglen $arg_length\n");
	    $job_line_length = length($command) + 1 + $arg_length;
	    debug("linelen $job_line_length\n");
	    if($job_line_length >= $Global::command_line_max_len) {
		unget_arg(pop @quoted_args);
		if($quoted_args[0]) {
		    last;
		} else {
		    die ("Command line too long at $next_arg");
		}
	    }
	}
    }
    if(@quoted_args) {
	my $arg=join(" ",@quoted_args);
	$job_line = $command;
	if(defined $job_line and $job_line =~ s/{}/$arg/g) {
	    # substituted {} with args
	} else {
	    # append args
	    $job_line .= " $arg";
	}
	debug("Return jobline: $job_line\n");
    }
    return $job_line;
}

sub shell_quote {
    # Quote the string so shell will not expand any special chars
    my (@strings) = (@_);
    my $arg; 
    for $arg (@strings) {
	# what is the right thing to do about '-' at start of line?
	# maybe substitute with './'
	# so it is not regarded as -option.
	$arg =~ s/\\/\\\\/g;
	
	$arg =~ s/([\#\?\`\(\)\*\>\<\~\|\; \"\!\$\&\'])/\\$1/g;
	$arg =~ s/([\002-\011\013-\032])/\\$1/g;
	$arg =~ s/([\n])/'\n'/g; # filenames with '\n' is quoted using \'
    }
    return (@strings);
}

#
# Number of processes, filehandles, max length of command line
#

sub max_length_of_command_line {
    # Find the max_length of a command line
    # First find an upper bound
    my $len = 2;
    do {
	$len += $len+1;
    } while (acceptable_command_line_length($len));
    # Then search for the actual max length between 0 and upper bound
    return binary_find_max_length(0,$len);
}

sub binary_find_max_length {
    # Given a lower and upper bound find the max_length of a command line
    my ($lower, $upper) = (@_);
    if($lower == $upper or $lower == $upper-1) { return $lower; }
    my $middle = int (($upper-$lower)/2 + $lower);
    $debug && print "$lower,$upper,$middle\n";
    if (acceptable_command_line_length($middle)) {
	return binary_find_max_length($middle,$upper);
    } else {
	return binary_find_max_length($lower,$middle);
    }
}

sub acceptable_command_line_length {
    # Test if this length can run
    # This is done using external perl script to avoid warning
    # (Can this be done prettier?)
    my $len = shift;
    my $testscript = q{'system ("true "."x"x$ARGV[0]); exit $?;'};
    $debug && print "perl -e $testscript $len\n";
    system "perl -e $testscript $len";
    return not $?;
}

sub compute_number_of_processes {
    my $opt_j = shift;
    my $processes = 0; 
    if(defined $opt_j) {
	if($opt_j =~ /^\+(\d+)$/) {
	    # E.g. -j +2
	    my $j = $1;
	    $processes = $j + no_of_cpus();
	} elsif ($opt_j =~ /^-(\d+)$/) {
	    # E.g. -j -2
	    my $j = $1;
	    $processes = no_of_cpus() - $j;
	} elsif ($opt_j =~ /^(\d+)\%$/) {
	    my $j = $1;
	    $processes = no_of_cpus() * $j / 100;
	} elsif ($opt_j =~ /^(\d+)$/) {
	    $processes = $1;
	    if($processes == 0) {
		# -j 0 = infinity (or at least close)
		$processes = 2**31;
	    }
	} else {
	    die_usage();
	}
	if($processes < 1) {
	    $processes = 1;
	}
    }
    # Have we asked for more processes than arguments?
    $processes = min_of_args_and_processes($processes);

    # Every simultaneous process uses 2 filehandles when grouping
    # perl uses 7 for something?
    # parallel uses 1 for memory_usage
    my $file_handles_needed = $processes*2+7+1;
    my $free_handles = compute_no_of_free_filehandles($file_handles_needed);
    if($file_handles_needed > $free_handles) {
	$processes = int (($free_handles -7 -1) / 2);
	print STDERR ("Warning: Only enough filehandles to run ",
		      $processes, " jobs in parallel. ",
		      "Raising ulimit -n may help\n");
    }

    debug("Computed processes: ".(int $processes)."\n");
    return int $processes;
}

sub min_of_args_and_processes {
    my $processes = shift;
    my $min_of_args_and_processes=0;
    my @args=();
    my $next_arg;
    my $max_system_proc_reached=0;
    my $time = time;
    DoNotReap();
    do {
	$min_of_args_and_processes++;
	$next_arg = get_next_arg();
	if(defined $next_arg) { 
	    push(@args, $next_arg);
	}
	$min_of_args_and_processes % 10	or $time=time;
	if($child = fork()) {
	    push (@children,$child);
	} elsif(defined $child) {
	    # The child needs to take one process. 
	    # It will be killed later
	    sleep 100000;
	    exit;
	} else {
	    $max_system_proc_reached = 1;
	}
	debug("Time to fork ten procs ", time-$time, " process ", $min_of_args_and_processes);
	if(time-$time > 1) {
	    # It took more than 1 second to fork ten processes. We should stop forking.
	    # Let us give the system a little slack
	    debug("\nLimiting processes to: $min_of_args_and_processes-10%=".
		  (int ($min_of_args_and_processes * 0.9)+1)."\n");
	    $min_of_args_and_processes = int ($min_of_args_and_processes * 0.9)+1;
	    $max_system_proc_reached = 1;
	}
    } while($min_of_args_and_processes <= $processes 
	    and defined $next_arg
	    and not $max_system_proc_reached);
    for $pid (@children) {
	kill 15, $pid;
	waitpid($pid,0);
    }
    wait();
    unget_arg(@args);
    return $min_of_args_and_processes;
}

sub NullReaper {
    while (waitpid(-1, &WNOHANG) > 0) { }
}

sub compute_no_of_free_filehandles {
    my $needed = shift;
    my $i=1;
    my %fh;
    while(open($fh{$i},"</dev/null")) { $i++; $i > $needed and last }
    for (keys %fh) { close $fh{$_} }
    debug("Number of free handles: ".$i."\n");    
    return $i;
}

sub no_of_cpus {
    my $no_of_cpus = 
	(no_of_cpus_gnu_linux() ||
	no_of_cpus_solaris());
    if($no_of_cpus) {
	return $no_of_cpus;
    } else {
	warn("Cannot figure out no of cpus. Using 1");
	return 1;
    }
}

sub no_of_cpus_gnu_linux {
    my $no_of_cpus;
    if(-e "/proc/cpuinfo") {
	$no_of_cpus = 0;
	open(IN,"cat /proc/cpuinfo|") || return undef;
	while(<IN>) {
	    /^processor.*[:]/ and $no_of_cpus++;
	}
	close IN;
    }
    return $no_of_cpus;
}

sub no_of_cpus_solaris {
    if(-x "/usr/sbin/psrinfo") {
	my @psrinfo = `/usr/sbin/psrinfo`;
	if($#psrinfo >= 0) {
	    return $#psrinfo +1;
	}
    }
    if(-x "/usr/sbin/prtconf") {
	my @prtconf = `/usr/sbin/prtconf | grep cpu..instance`;
	if($#prtconf >= 0) {
	    return $#prtconf +1;
	}
    }
    return undef;
}


#
# Running and printing the jobs
#

sub init_run_jobs {
    # Remember the original STDOUT and STDERR
    open $Global::original_stdout, ">&STDOUT" or die "Can't dup STDOUT: $!";
    open $Global::original_stderr, ">&STDERR" or die "Can't dup STDERR: $!";
    $Global::running_jobs=0;
}

sub next_command_line {
    my $cmd_line;
    do {
	$cmd_line = generate_command_line($Global::command);
    } while (defined $cmd_line and $cmd_line =~ /^\s*$/); # Skip empty lines
    return $cmd_line;
}

sub get_next_arg {
    my $arg;
    if(@Global::unget_arg) {
	$arg = shift @Global::unget_arg;
    } else {
	if(eof STDIN) {
	    return undef;
	}
	$arg = <STDIN>;
	chomp $arg;
	if($Global::input_is_filename) {
	    ($arg) = shell_quote($arg);
	}
    }
    debug("Next arg: ".$arg."\n");    
    return $arg;
}

sub unget_arg {
    push @Global::unget_arg, @_;
}

sub drain_job_queue {
    while($Global::running_jobs > 0) {
	debug("jobs running: $Global::running_jobs Memory usage:".my_memory_usage()."\n");
	sleep 1;
    }
}

sub start_another_job {
    # Grab a job from @Global::command, start it 
    # and remember the pid, the STDOUT and the STDERR handles
    # If no more jobs: do nothing
    my $command = next_command_line();
    if(defined $command) {
	my %jobinfo = start_job($command);
	$Global::running{$jobinfo{"pid"}} = \%jobinfo;
	return 1;
    } else {
	return 0;
    }
}

sub start_job {
    # Setup STDOUT and STDERR for a job and start it.
    my $command = shift;
    my ($pid,$out,$err,%out,%err,$outname,$errname,$name);
    if($Global::grouped) {
	# To group we create temporary files for STDOUT and STDERR
	# Filehandles are global, so to not overwrite the filehandles use a hash with new keys
	# To avoid the cleanup unlink the files immediately (but keep them open)
	$outname = ++$Global::TmpFilename;
	($out{$outname},$name) = tempfile(SUFFIX => ".par");
	unlink $name;
	$errname = ++$Global::TmpFilename;
	($err{$errname},$name) = tempfile(SUFFIX => ".par");
	unlink $name;

	open STDOUT, '>&', $out{$outname} or die "Can't redirect STDOUT: $!";
	open STDERR, '>&', $err{$errname} or die "Can't dup STDOUT: $!";
    }

    if($Global::verbose and not $Global::grouped) {
	print STDOUT $command,"\n";
    }
    $Global::running_jobs++;
    debug("$Global::running_jobs processes. Starting: $command\n");
    $pid = open3(gensym, ">&STDOUT", ">&STDERR", $command) || 
	die("open3 failed. Report a bug to <parallel\@tange.dk>\n");
    debug("started: $command\n");
    open STDOUT, ">&", $Global::original_stdout or die "Can't dup \$oldout: $!";
    open STDERR, ">&", $Global::original_stderr or die "Can't dup \$oldout: $!";

    if($Global::grouped) {
	return ("pid" => $pid,
		"out" => $out{$outname},
		"err" => $err{$errname},
		"command" => $command);
    } else {
	return ("pid" => $pid, "command" => $command);
    }
}

sub print_job {
    # Print the output of the jobs
    # Only relevant for grouping
    $Global::grouped or return;
    my $fhs = shift;
    if(not defined $fhs) {
	return;
    }
    my $out = $fhs->{out};
    my $err = $fhs->{err};
    my $command = $fhs->{command};

    debug(">>joboutput $command\n");
    if($Global::verbose and $Global::grouped) {
	print STDOUT $command,"\n";
	# If STDOUT and STDERR is merged, we want the command to be printed first
	# so flush to avoid STDOUT being buffered
	flush STDOUT;
    }
    seek $_, 0, 0 for $out, $err;
    if($Global::debug) {
	while( <$err> ) { print STDERR "ERR: $_" }
	while( <$out> ) { print STDOUT "OUT: $_" }
    } else {
	print STDERR <$err>;
	print STDOUT <$out>;
    }
    debug("<<joboutput $command\n");
    close $out;
    close $err;
}

#
# Signal handling stuff
#

sub CountSigChild {
    $Global::SigChildCaught++;
}

sub DoNotReap {
    # This will postpone SIGCHILD for sections that cannot be distracted by a dying child
    # (Racecondition)
    $SIG{CHLD} = \&CountSigChild;
}

sub ReapIfNeeded {
    # Do the postponed SIGCHILDs if any and re-install normal reaper for SIGCHILD
    # (Racecondition)
    if($Global::SigChildCaught) {
	$Global::SigChildCaught = 0;
	Reaper();
    }
    $SIG{CHLD} = \&Reaper;    
}

sub Reaper {
    # A job finished.
    # Print the output.
    # Start another job
    DoNotReap();
    $Global::reaperlevel++;
    my $stiff;
    debug("Reaper called $Global::reaperlevel\n");
    while (($stiff = waitpid(-1, &WNOHANG)) > 0) {
	print_job($Global::running{$stiff});
	delete $Global::running{$stiff};
	$Global::running_jobs--;
	start_another_job();
    }
    ReapIfNeeded();
    debug("Reaper exit $Global::reaperlevel\n");
    $Global::reaperlevel--;
}

#
# Usage
#

sub die_usage {
    usage();
    exit(1);
}

sub usage {
    print "Usage:\n";
    print "parallel [options] [command [arguments]] < list_of_arguments\n";
}

#
# Debugging
#

sub debug {
    $Global::debug or return;
    if($Global::original_stdout) {
	print $Global::original_stdout @_;
    } else {
	print @_;
    }
}

sub my_memory_usage {
    use strict;
    use FileHandle;

    my $pid = $$;
    my $fh = FileHandle->new("</proc/$pid/stat");

    my $data = <$fh>;
    chomp $data;
    $fh->close;

    my @procinfo = split(/\s+/,$data);

    return $procinfo[22];
}

sub my_size {
    my @size_this = (@_);
    eval "use Devel::Size qw(size total_size)";
    if ($@) {
	return -1;
    } else {
	return total_size(@_);
    }
}


sub my_dump {
    my @dump_this = (@_);
    eval "use Data::Dump qw(dump);";
    if ($@) {
        # Data::Dump not installed
        eval "use Data::Dumper;";
        if ($@) {
            my $err =  "Neither Data::Dump nor Data::Dumper is installed\n".
                "Not dumping output\n";
            print STDERR $err;
            return $err;
        } else {
            return Dumper(@dump_this);
        }
    } else {
        eval "use Data::Dump qw(dump);";
        return (Data::Dump::dump(@dump_this));
    }
}

# Keep perl -w happy
$main::opt_u = $main::opt_c = $main::opt_f = $main::opt_q =
$main::opt_0 = $main::opt_s = $main::opt_v = $main::opt_g =
$main::opt_j = $main::opt_d = $main::opt_x =1;
$Global::xargs = 1;


